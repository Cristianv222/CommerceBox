# Generated by Django 4.2.7 on 2025-10-15 01:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("inventory_management", "0003_agregar_marca"),
        ("sales_management", "0003_alter_venta_numero_venta"),
    ]

    operations = [
        migrations.CreateModel(
            name="ConfiguracionCodigoBarras",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre de la configuración",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "tipo_codigo",
                    models.CharField(
                        choices=[
                            ("EAN13", "EAN-13"),
                            ("EAN8", "EAN-8"),
                            ("UPC", "UPC-A"),
                            ("CODE128", "Code 128"),
                            ("CODE39", "Code 39"),
                            ("QR", "Código QR"),
                            ("DATAMATRIX", "Data Matrix"),
                            ("PDF417", "PDF417"),
                        ],
                        default="CODE128",
                        max_length=20,
                    ),
                ),
                (
                    "prefijo",
                    models.CharField(
                        blank=True,
                        help_text="Prefijo para el código (ej: CBX)",
                        max_length=10,
                    ),
                ),
                (
                    "sufijo",
                    models.CharField(
                        blank=True, help_text="Sufijo para el código", max_length=10
                    ),
                ),
                (
                    "longitud_secuencia",
                    models.IntegerField(
                        default=5,
                        help_text="Longitud del número secuencial",
                        validators=[
                            django.core.validators.MinValueValidator(3),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "ultimo_numero",
                    models.BigIntegerField(
                        default=0, help_text="Último número generado"
                    ),
                ),
                (
                    "ancho_codigo",
                    models.IntegerField(
                        default=50,
                        help_text="Ancho del código en mm",
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(200),
                        ],
                    ),
                ),
                (
                    "alto_codigo",
                    models.IntegerField(
                        default=15,
                        help_text="Alto del código en mm",
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "mostrar_texto",
                    models.BooleanField(
                        default=True, help_text="Mostrar el texto del código"
                    ),
                ),
                (
                    "posicion_texto",
                    models.CharField(
                        choices=[
                            ("ARRIBA", "Arriba del código"),
                            ("ABAJO", "Abajo del código"),
                            ("NINGUNO", "Sin texto"),
                        ],
                        default="ABAJO",
                        max_length=10,
                    ),
                ),
                (
                    "tamaño_fuente",
                    models.IntegerField(
                        default=10,
                        validators=[
                            django.core.validators.MinValueValidator(6),
                            django.core.validators.MaxValueValidator(20),
                        ],
                    ),
                ),
                ("incluir_nombre_producto", models.BooleanField(default=True)),
                ("incluir_precio", models.BooleanField(default=True)),
                ("incluir_fecha", models.BooleanField(default=False)),
                ("incluir_marca", models.BooleanField(default=False)),
                ("es_para_productos", models.BooleanField(default=True)),
                ("es_para_quintales", models.BooleanField(default=True)),
                ("activa", models.BooleanField(default=True)),
                ("es_predeterminada", models.BooleanField(default=False)),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                ("fecha_actualizacion", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Configuración de Código de Barras",
                "verbose_name_plural": "Configuraciones de Códigos de Barras",
                "db_table": "hw_config_codigo_barras",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="EscanerCodigoBarras",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("codigo", models.CharField(max_length=20, unique=True)),
                ("nombre", models.CharField(max_length=100)),
                ("marca", models.CharField(max_length=50)),
                ("modelo", models.CharField(max_length=50)),
                ("numero_serie", models.CharField(blank=True, max_length=100)),
                (
                    "tipo_escaner",
                    models.CharField(
                        choices=[
                            ("USB_HID", "USB HID (Teclado)"),
                            ("USB_SERIAL", "USB Serial"),
                            ("BLUETOOTH", "Bluetooth"),
                            ("WIFI", "WiFi"),
                        ],
                        default="USB_HID",
                        max_length=20,
                    ),
                ),
                (
                    "modo_operacion",
                    models.CharField(
                        choices=[
                            ("MANUAL", "Manual (Gatillo)"),
                            ("AUTOMATICO", "Automático (Presentación)"),
                            ("CONTINUO", "Continuo"),
                        ],
                        default="MANUAL",
                        max_length=20,
                    ),
                ),
                (
                    "prefijo",
                    models.CharField(
                        blank=True,
                        help_text="Prefijo a agregar a las lecturas",
                        max_length=10,
                    ),
                ),
                (
                    "sufijo",
                    models.CharField(
                        blank=True,
                        default="\\r\\n",
                        help_text="Sufijo (normalmente Enter)",
                        max_length=10,
                    ),
                ),
                ("soporta_ean13", models.BooleanField(default=True)),
                ("soporta_ean8", models.BooleanField(default=True)),
                ("soporta_upc", models.BooleanField(default=True)),
                ("soporta_code128", models.BooleanField(default=True)),
                ("soporta_code39", models.BooleanField(default=True)),
                ("soporta_qr", models.BooleanField(default=False)),
                ("soporta_datamatrix", models.BooleanField(default=False)),
                ("activo", models.BooleanField(default=True)),
                ("ubicacion", models.CharField(max_length=100)),
                (
                    "fecha_instalacion",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("contador_lecturas", models.BigIntegerField(default=0)),
            ],
            options={
                "verbose_name": "Escáner de Código de Barras",
                "verbose_name_plural": "Escáneres de Códigos de Barras",
                "db_table": "hw_escaner_codigo_barras",
                "ordering": ["ubicacion", "nombre"],
            },
        ),
        migrations.CreateModel(
            name="GavetaDinero",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        help_text="Código interno (ej: GAV-001)",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "nombre",
                    models.CharField(help_text="Nombre descriptivo", max_length=100),
                ),
                (
                    "tipo_conexion",
                    models.CharField(
                        choices=[
                            ("IMPRESORA", "Conectada a Impresora"),
                            ("USB", "USB Directo"),
                            ("SERIAL", "Puerto Serial"),
                            ("RJ11", "RJ11/RJ12"),
                        ],
                        default="IMPRESORA",
                        max_length=20,
                    ),
                ),
                (
                    "puerto",
                    models.CharField(
                        blank=True,
                        help_text="Puerto de conexión directa",
                        max_length=50,
                    ),
                ),
                (
                    "comando_apertura",
                    models.CharField(
                        blank=True,
                        default="\\x1b\\x70\\x00\\x19\\xfa",
                        help_text="Comando ESC/POS para abrir (hexadecimal)",
                        max_length=100,
                    ),
                ),
                (
                    "duracion_pulso",
                    models.IntegerField(
                        default=100, help_text="Duración del pulso en ms"
                    ),
                ),
                (
                    "estado",
                    models.CharField(
                        choices=[
                            ("CERRADA", "🔒 Cerrada"),
                            ("ABIERTA", "🔓 Abierta"),
                            ("DESCONECTADA", "⚠️ Desconectada"),
                        ],
                        default="CERRADA",
                        max_length=20,
                    ),
                ),
                (
                    "ubicacion",
                    models.CharField(
                        help_text="Ubicación física (ej: Caja 1)", max_length=100
                    ),
                ),
                ("activa", models.BooleanField(default=True)),
                (
                    "abrir_en_venta",
                    models.BooleanField(
                        default=True,
                        help_text="Abrir automáticamente al completar venta",
                    ),
                ),
                (
                    "abrir_en_cobro",
                    models.BooleanField(
                        default=True, help_text="Abrir al registrar cobro"
                    ),
                ),
                (
                    "requiere_autorizacion",
                    models.BooleanField(
                        default=False,
                        help_text="Requiere autorización para apertura manual",
                    ),
                ),
                ("contador_aperturas", models.BigIntegerField(default=0)),
                ("fecha_ultima_apertura", models.DateTimeField(blank=True, null=True)),
                ("notas", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Gaveta de Dinero",
                "verbose_name_plural": "Gavetas de Dinero",
                "db_table": "hw_gaveta_dinero",
                "ordering": ["ubicacion", "nombre"],
            },
        ),
        migrations.CreateModel(
            name="Impresora",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        help_text="Código interno (ej: IMP-001)",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre descriptivo de la impresora", max_length=100
                    ),
                ),
                (
                    "marca",
                    models.CharField(
                        help_text="Marca de la impresora (Epson, Star, Zebra, etc)",
                        max_length=50,
                    ),
                ),
                (
                    "modelo",
                    models.CharField(
                        help_text="Modelo específico (ej: TM-T20III, ZD220, etc)",
                        max_length=50,
                    ),
                ),
                (
                    "numero_serie",
                    models.CharField(
                        blank=True,
                        help_text="Número de serie del dispositivo",
                        max_length=100,
                    ),
                ),
                (
                    "tipo_impresora",
                    models.CharField(
                        choices=[
                            ("TERMICA_TICKET", "Térmica de Tickets (80mm)"),
                            (
                                "TERMICA_FACTURA",
                                "Térmica de Facturas (80mm con gaveta)",
                            ),
                            ("ETIQUETAS", "Etiquetas/Códigos de Barras"),
                            ("LASER", "Láser/Tinta (A4)"),
                            ("MATRIZ", "Matriz de Puntos"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "tipo_conexion",
                    models.CharField(
                        choices=[
                            ("USB", "USB Directo"),
                            ("LAN", "Red LAN (Ethernet)"),
                            ("WIFI", "WiFi"),
                            ("SERIAL", "Puerto Serial (COM)"),
                            ("PARALELO", "Puerto Paralelo (LPT)"),
                            ("DRIVER", "Driver del Sistema"),
                            ("RAW", "Raw Socket TCP/IP"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "protocolo",
                    models.CharField(
                        choices=[
                            ("ESC_POS", "ESC/POS (Epson Standard)"),
                            ("STAR", "Star Line Mode"),
                            ("ZPL", "ZPL (Zebra)"),
                            ("EPL", "EPL (Eltron)"),
                            ("TSPL", "TSPL (TSC)"),
                            ("DPL", "DPL (Datamax)"),
                            ("CUSTOM", "Personalizado"),
                            ("WINDOWS", "Windows Driver"),
                        ],
                        default="ESC_POS",
                        max_length=20,
                    ),
                ),
                (
                    "puerto_usb",
                    models.CharField(
                        blank=True,
                        help_text="Ruta del dispositivo USB (ej: /dev/usb/lp0, COM3)",
                        max_length=100,
                    ),
                ),
                (
                    "vid_usb",
                    models.CharField(
                        blank=True,
                        help_text="Vendor ID USB (hexadecimal)",
                        max_length=10,
                    ),
                ),
                (
                    "pid_usb",
                    models.CharField(
                        blank=True,
                        help_text="Product ID USB (hexadecimal)",
                        max_length=10,
                    ),
                ),
                (
                    "direccion_ip",
                    models.GenericIPAddressField(
                        blank=True, help_text="Dirección IP de la impresora", null=True
                    ),
                ),
                (
                    "puerto_red",
                    models.IntegerField(
                        blank=True,
                        default=9100,
                        help_text="Puerto de red (normalmente 9100)",
                        null=True,
                    ),
                ),
                (
                    "mac_address",
                    models.CharField(
                        blank=True,
                        help_text="Dirección MAC de la impresora",
                        max_length=20,
                    ),
                ),
                (
                    "puerto_serial",
                    models.CharField(
                        blank=True,
                        help_text="Puerto serial (COM1, /dev/ttyS0, etc)",
                        max_length=20,
                    ),
                ),
                (
                    "baudrate",
                    models.IntegerField(
                        blank=True,
                        default=9600,
                        help_text="Velocidad del puerto serial",
                        null=True,
                    ),
                ),
                (
                    "nombre_driver",
                    models.CharField(
                        blank=True,
                        help_text="Nombre del driver instalado en Windows/CUPS",
                        max_length=100,
                    ),
                ),
                (
                    "ancho_papel",
                    models.IntegerField(
                        default=80,
                        help_text="Ancho del papel en mm",
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(300),
                        ],
                    ),
                ),
                (
                    "largo_maximo",
                    models.IntegerField(
                        blank=True,
                        help_text="Largo máximo del papel en mm (null = continuo)",
                        null=True,
                    ),
                ),
                (
                    "ancho_etiqueta",
                    models.IntegerField(
                        blank=True, help_text="Ancho de la etiqueta en mm", null=True
                    ),
                ),
                (
                    "alto_etiqueta",
                    models.IntegerField(
                        blank=True, help_text="Alto de la etiqueta en mm", null=True
                    ),
                ),
                (
                    "gap_etiquetas",
                    models.IntegerField(
                        blank=True,
                        default=3,
                        help_text="Espacio entre etiquetas en mm",
                        null=True,
                    ),
                ),
                (
                    "densidad_impresion",
                    models.IntegerField(
                        default=3,
                        help_text="Densidad/Oscuridad de impresión (1-5)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "velocidad_impresion",
                    models.IntegerField(
                        default=100,
                        help_text="Velocidad de impresión en mm/s",
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(300),
                        ],
                    ),
                ),
                (
                    "soporta_corte_automatico",
                    models.BooleanField(
                        default=True, help_text="La impresora tiene cortador automático"
                    ),
                ),
                (
                    "soporta_corte_parcial",
                    models.BooleanField(
                        default=True, help_text="Soporta corte parcial del papel"
                    ),
                ),
                (
                    "soporta_codigo_barras",
                    models.BooleanField(
                        default=True,
                        help_text="Puede imprimir códigos de barras nativamente",
                    ),
                ),
                (
                    "soporta_qr",
                    models.BooleanField(
                        default=False, help_text="Puede imprimir códigos QR nativamente"
                    ),
                ),
                (
                    "soporta_imagenes",
                    models.BooleanField(
                        default=False, help_text="Puede imprimir imágenes/logos"
                    ),
                ),
                (
                    "tiene_gaveta",
                    models.BooleanField(
                        default=False, help_text="Tiene gaveta de dinero conectada"
                    ),
                ),
                (
                    "pin_gaveta",
                    models.IntegerField(
                        blank=True,
                        help_text="Pin de la gaveta (0 o 1)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "estado",
                    models.CharField(
                        choices=[
                            ("ACTIVA", "🟢 Activa y Funcionando"),
                            ("INACTIVA", "🟡 Inactiva"),
                            ("ERROR", "🔴 Con Error"),
                            ("MANTENIMIENTO", "🔧 En Mantenimiento"),
                        ],
                        default="ACTIVA",
                        max_length=20,
                    ),
                ),
                (
                    "ubicacion",
                    models.CharField(
                        blank=True,
                        help_text="Ubicación física (ej: Caja 1, Bodega, etc)",
                        max_length=100,
                    ),
                ),
                (
                    "configuracion_extra",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Configuración adicional específica del modelo",
                    ),
                ),
                (
                    "es_principal_tickets",
                    models.BooleanField(
                        default=False,
                        help_text="Es la impresora principal para tickets",
                    ),
                ),
                (
                    "es_principal_facturas",
                    models.BooleanField(
                        default=False,
                        help_text="Es la impresora principal para facturas",
                    ),
                ),
                (
                    "es_principal_etiquetas",
                    models.BooleanField(
                        default=False,
                        help_text="Es la impresora principal para etiquetas",
                    ),
                ),
                (
                    "fecha_instalacion",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("fecha_ultima_prueba", models.DateTimeField(blank=True, null=True)),
                (
                    "fecha_ultimo_mantenimiento",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "contador_impresiones",
                    models.BigIntegerField(
                        default=0, help_text="Contador total de impresiones realizadas"
                    ),
                ),
                (
                    "notas",
                    models.TextField(
                        blank=True,
                        help_text="Notas sobre configuración, problemas, etc",
                    ),
                ),
            ],
            options={
                "verbose_name": "Impresora",
                "verbose_name_plural": "Impresoras",
                "db_table": "hw_impresora",
                "ordering": ["ubicacion", "nombre"],
            },
        ),
        migrations.CreateModel(
            name="RegistroImpresion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "tipo_documento",
                    models.CharField(
                        choices=[
                            ("TICKET", "Ticket de Venta"),
                            ("FACTURA", "Factura"),
                            ("ETIQUETA", "Etiqueta"),
                            ("CODIGO_BARRAS", "Código de Barras"),
                            ("REPORTE", "Reporte"),
                            ("OTRO", "Otro"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "numero_documento",
                    models.CharField(
                        blank=True,
                        help_text="Número del documento impreso",
                        max_length=50,
                    ),
                ),
                (
                    "contenido_resumen",
                    models.TextField(
                        blank=True, help_text="Resumen del contenido impreso"
                    ),
                ),
                (
                    "estado",
                    models.CharField(
                        choices=[
                            ("EXITOSO", "✅ Exitoso"),
                            ("ERROR", "❌ Error"),
                            ("CANCELADO", "⚠️ Cancelado"),
                            ("REINTENTANDO", "🔄 Reintentando"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "mensaje_error",
                    models.TextField(blank=True, help_text="Mensaje de error si falló"),
                ),
                (
                    "intentos",
                    models.IntegerField(
                        default=1, help_text="Número de intentos realizados"
                    ),
                ),
                (
                    "fecha_impresion",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "tiempo_procesamiento",
                    models.IntegerField(
                        blank=True, help_text="Tiempo de procesamiento en ms", null=True
                    ),
                ),
                (
                    "tamaño_bytes",
                    models.IntegerField(
                        blank=True, help_text="Tamaño del documento en bytes", null=True
                    ),
                ),
                (
                    "impresora",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="impresiones",
                        to="hardware_integration.impresora",
                    ),
                ),
                (
                    "producto",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="inventory_management.producto",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "venta",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sales_management.venta",
                    ),
                ),
            ],
            options={
                "verbose_name": "Registro de Impresión",
                "verbose_name_plural": "Registros de Impresión",
                "db_table": "hw_registro_impresion",
                "ordering": ["-fecha_impresion"],
            },
        ),
        migrations.CreateModel(
            name="PlantillaImpresion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        help_text="Código único de la plantilla",
                        max_length=20,
                        unique=True,
                    ),
                ),
                ("nombre", models.CharField(max_length=100)),
                ("descripcion", models.TextField(blank=True)),
                (
                    "tipo_documento",
                    models.CharField(
                        choices=[
                            ("TICKET", "Ticket de Venta"),
                            ("FACTURA", "Factura"),
                            ("ETIQUETA_PRODUCTO", "Etiqueta de Producto"),
                            ("ETIQUETA_PRECIO", "Etiqueta de Precio"),
                            ("CODIGO_BARRAS", "Código de Barras Simple"),
                            ("REPORTE_Z", "Reporte Z (Cierre de Caja)"),
                            ("VALE", "Vale/Comprobante"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "formato",
                    models.CharField(
                        choices=[
                            ("TEXTO", "Texto Plano"),
                            ("HTML", "HTML"),
                            ("ESC_POS", "Comandos ESC/POS"),
                            ("ZPL", "ZPL (Zebra)"),
                            ("TSPL", "TSPL (TSC)"),
                        ],
                        default="TEXTO",
                        max_length=20,
                    ),
                ),
                (
                    "contenido",
                    models.TextField(
                        help_text="Contenido de la plantilla con variables"
                    ),
                ),
                (
                    "variables_disponibles",
                    models.JSONField(
                        default=list,
                        help_text="Lista de variables disponibles para esta plantilla",
                    ),
                ),
                ("incluir_logo", models.BooleanField(default=True)),
                ("incluir_encabezado", models.BooleanField(default=True)),
                ("incluir_pie", models.BooleanField(default=True)),
                ("margen_superior", models.IntegerField(default=5)),
                ("margen_inferior", models.IntegerField(default=5)),
                ("margen_izquierdo", models.IntegerField(default=5)),
                ("margen_derecho", models.IntegerField(default=5)),
                ("activa", models.BooleanField(default=True)),
                (
                    "es_predeterminada",
                    models.BooleanField(
                        default=False,
                        help_text="Es la plantilla predeterminada para este tipo",
                    ),
                ),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                ("fecha_actualizacion", models.DateTimeField(auto_now=True)),
                (
                    "impresora",
                    models.ForeignKey(
                        blank=True,
                        help_text="Impresora específica para esta plantilla",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="plantillas",
                        to="hardware_integration.impresora",
                    ),
                ),
            ],
            options={
                "verbose_name": "Plantilla de Impresión",
                "verbose_name_plural": "Plantillas de Impresión",
                "db_table": "hw_plantilla_impresion",
                "ordering": ["tipo_documento", "nombre"],
            },
        ),
        migrations.AddIndex(
            model_name="impresora",
            index=models.Index(
                fields=["tipo_impresora", "estado"],
                name="hw_impresor_tipo_im_5cf9ee_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="impresora",
            index=models.Index(
                fields=["es_principal_tickets"], name="hw_impresor_es_prin_f04392_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="impresora",
            index=models.Index(
                fields=["es_principal_facturas"], name="hw_impresor_es_prin_362b86_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="impresora",
            index=models.Index(
                fields=["es_principal_etiquetas"], name="hw_impresor_es_prin_456651_idx"
            ),
        ),
        migrations.AddField(
            model_name="gavetadinero",
            name="impresora",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="gavetas",
                to="hardware_integration.impresora",
            ),
        ),
        migrations.AddField(
            model_name="gavetadinero",
            name="usuario_ultima_apertura",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddIndex(
            model_name="registroimpresion",
            index=models.Index(
                fields=["-fecha_impresion"], name="hw_registro_fecha_i_6a0699_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="registroimpresion",
            index=models.Index(
                fields=["impresora", "-fecha_impresion"],
                name="hw_registro_impreso_bcd07b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="registroimpresion",
            index=models.Index(
                fields=["tipo_documento", "estado"],
                name="hw_registro_tipo_do_b3e8f8_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="plantillaimpresion",
            unique_together={("tipo_documento", "es_predeterminada")},
        ),
    ]
