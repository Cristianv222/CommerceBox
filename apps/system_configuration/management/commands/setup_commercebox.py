# apps/system_configuration/management/commands/setup_commercebox_complete.py

"""
CommerceBox - Comando de Configuraci√≥n Inicial COMPLETA
Unifica la configuraci√≥n del sistema + configuraci√≥n operativa
Versi√≥n: 2.0 - Unificado
"""

from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.db import transaction
from django.utils import timezone
from decimal import Decimal

# Importaciones de system_configuration
from apps.system_configuration.models import (
    ConfiguracionSistema, ParametroSistema
)

# Importaciones de inventory_management
from apps.inventory_management.models import (
    ConfiguracionInventario, Categoria, Proveedor, Marca
)

User = get_user_model()


class Command(BaseCommand):
    help = 'Configuraci√≥n inicial COMPLETA de CommerceBox (Sistema + Operativo)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--reset',
            action='store_true',
            help='Reiniciar configuraci√≥n existente (¬°CUIDADO!)',
        )
        parser.add_argument(
            '--skip-admin',
            action='store_true',
            help='Saltar creaci√≥n de usuario administrador',
        )
        parser.add_argument(
            '--admin-password',
            type=str,
            default='admin123',
            help='Contrase√±a para usuario administrador (default: admin123)',
        )

    def handle(self, *args, **options):
        self.reset = options['reset']
        self.skip_admin = options['skip_admin']
        self.admin_password = options['admin_password']
        
        self.stdout.write('=' * 70)
        self.stdout.write(
            self.style.SUCCESS('üöÄ CONFIGURACI√ìN INICIAL COMPLETA DE COMMERCEBOX')
        )
        self.stdout.write('=' * 70)
        self.stdout.write('')
        
        if self.reset:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è  MODO RESET ACTIVADO - Se eliminar√°n datos existentes')
            )
            confirmar = input('¬øEst√° seguro? (escriba "SI" para confirmar): ')
            if confirmar != 'SI':
                self.stdout.write(self.style.ERROR('‚ùå Operaci√≥n cancelada'))
                return
        
        try:
            with transaction.atomic():
                # PARTE 1: CONFIGURACI√ìN DEL SISTEMA
                self.stdout.write('\n' + '‚ñ∂' * 35)
                self.stdout.write(
                    self.style.SUCCESS('üì¶ PARTE 1: CONFIGURACI√ìN DEL SISTEMA')
                )
                self.stdout.write('‚ñ∂' * 35 + '\n')
                
                self._configurar_sistema()
                self._crear_parametros_sistema()
                
                # PARTE 2: CONFIGURACI√ìN OPERATIVA
                self.stdout.write('\n' + '‚ñ∂' * 35)
                self.stdout.write(
                    self.style.SUCCESS('üì¶ PARTE 2: CONFIGURACI√ìN OPERATIVA')
                )
                self.stdout.write('‚ñ∂' * 35 + '\n')
                
                if not self.skip_admin:
                    self._crear_usuario_admin()
                
                self._configurar_inventario()
                self._crear_categorias()
                self._crear_marcas()
                self._crear_proveedor()
                
                # RESUMEN FINAL
                self._mostrar_resumen()
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'\n‚ùå Error en configuraci√≥n: {str(e)}')
            )
            import traceback
            traceback.print_exc()
            raise

    # ========================================================================
    # PARTE 1: CONFIGURACI√ìN DEL SISTEMA
    # ========================================================================

    def _configurar_sistema(self):
        """Crear ConfiguracionSistema (Singleton)"""
        self.stdout.write('üìã Configurando sistema global...')
        
        if self.reset:
            ConfiguracionSistema.objects.all().delete()
        
        config, created = ConfiguracionSistema.objects.get_or_create(pk=1)
        
        if created:
            self.stdout.write(self.style.SUCCESS('  ‚úÖ ConfiguracionSistema creada'))
            self.config_sistema_creada = True
        else:
            self.stdout.write(self.style.WARNING('  ‚ÑπÔ∏è  ConfiguracionSistema ya existe'))
            self.config_sistema_creada = False
        
        self.config_sistema = config

    def _crear_parametros_sistema(self):
        """Crear par√°metros del sistema por m√≥dulo"""
        self.stdout.write('‚öôÔ∏è  Configurando par√°metros del sistema...')
        
        if self.reset:
            ParametroSistema.objects.all().delete()
        
        parametros = self._obtener_parametros_sistema()
        
        creados = 0
        existentes = 0
        
        for param_data in parametros:
            param, created = ParametroSistema.objects.get_or_create(
                modulo=param_data['modulo'],
                clave=param_data['clave'],
                defaults=param_data
            )
            
            if created:
                creados += 1
            else:
                existentes += 1
        
        self.stdout.write(
            self.style.SUCCESS(f'  ‚úÖ {creados} par√°metros creados')
        )
        if existentes > 0:
            self.stdout.write(
                self.style.WARNING(f'  ‚ÑπÔ∏è  {existentes} par√°metros ya exist√≠an')
            )
        
        self.parametros_creados = creados
        self.parametros_existentes = existentes

    def _obtener_parametros_sistema(self):
        """Retorna lista de par√°metros del sistema"""
        return [
            # ==========================================
            # PAR√ÅMETROS DE INVENTARIO
            # ==========================================
            {
                'modulo': 'inventory',
                'clave': 'peso_conversion_arroba',
                'nombre': 'Conversi√≥n de Arroba a Kilogramos',
                'descripcion': 'Factor de conversi√≥n de arroba a kg (1 arroba = X kg)',
                'tipo_dato': 'DECIMAL',
                'valor': '25.0',
                'valor_default': '25.0',
                'grupo': 'Conversiones',
                'orden': 1,
                'activo': True,
            },
            {
                'modulo': 'inventory',
                'clave': 'peso_conversion_libra',
                'nombre': 'Conversi√≥n de Libra a Kilogramos',
                'descripcion': 'Factor de conversi√≥n de libra a kg (1 libra = X kg)',
                'tipo_dato': 'DECIMAL',
                'valor': '0.453592',
                'valor_default': '0.453592',
                'grupo': 'Conversiones',
                'orden': 2,
                'activo': True,
            },
            {
                'modulo': 'inventory',
                'clave': 'alerta_stock_critico_quintales',
                'nombre': 'Alerta Stock Cr√≠tico Quintales',
                'descripcion': 'Porcentaje de peso restante para considerar quintal cr√≠tico',
                'tipo_dato': 'DECIMAL',
                'valor': '10.0',
                'valor_default': '10.0',
                'grupo': 'Alertas',
                'orden': 3,
                'activo': True,
            },
            {
                'modulo': 'inventory',
                'clave': 'alerta_stock_bajo_quintales',
                'nombre': 'Alerta Stock Bajo Quintales',
                'descripcion': 'Porcentaje de peso restante para considerar quintal bajo',
                'tipo_dato': 'DECIMAL',
                'valor': '25.0',
                'valor_default': '25.0',
                'grupo': 'Alertas',
                'orden': 4,
                'activo': True,
            },
            {
                'modulo': 'inventory',
                'clave': 'permitir_venta_stock_cero',
                'nombre': 'Permitir Venta con Stock Cero',
                'descripcion': 'Permite realizar ventas cuando el stock es cero',
                'tipo_dato': 'BOOLEAN',
                'valor': 'false',
                'valor_default': 'false',
                'grupo': 'Ventas',
                'orden': 5,
                'activo': True,
            },
            
            # ==========================================
            # PAR√ÅMETROS DE VENTAS
            # ==========================================
            {
                'modulo': 'sales',
                'clave': 'descuento_maximo_categoria_alimentos',
                'nombre': 'Descuento M√°ximo - Alimentos',
                'descripcion': 'Descuento m√°ximo permitido para categor√≠a de alimentos (%)',
                'tipo_dato': 'DECIMAL',
                'valor': '10.0',
                'valor_default': '10.0',
                'grupo': 'Descuentos',
                'orden': 1,
                'activo': True,
            },
            {
                'modulo': 'sales',
                'clave': 'descuento_maximo_categoria_bebidas',
                'nombre': 'Descuento M√°ximo - Bebidas',
                'descripcion': 'Descuento m√°ximo permitido para categor√≠a de bebidas (%)',
                'tipo_dato': 'DECIMAL',
                'valor': '15.0',
                'valor_default': '15.0',
                'grupo': 'Descuentos',
                'orden': 2,
                'activo': True,
            },
            {
                'modulo': 'sales',
                'clave': 'precio_minimo_venta_quintal',
                'nombre': 'Precio M√≠nimo Venta Quintal',
                'descripcion': 'Precio m√≠nimo por kg de quintal (evita ventas a p√©rdida)',
                'tipo_dato': 'DECIMAL',
                'valor': '0.50',
                'valor_default': '0.50',
                'grupo': 'Precios',
                'orden': 3,
                'activo': True,
            },
            {
                'modulo': 'sales',
                'clave': 'generar_factura_automatica',
                'nombre': 'Generar Factura Autom√°tica',
                'descripcion': 'Genera factura autom√°ticamente despu√©s de cada venta',
                'tipo_dato': 'BOOLEAN',
                'valor': 'true',
                'valor_default': 'true',
                'grupo': 'Facturaci√≥n',
                'orden': 4,
                'activo': True,
            },
            {
                'modulo': 'sales',
                'clave': 'imprimir_ticket_automatico',
                'nombre': 'Imprimir Ticket Autom√°tico',
                'descripcion': 'Imprime ticket autom√°ticamente despu√©s de venta',
                'tipo_dato': 'BOOLEAN',
                'valor': 'true',
                'valor_default': 'true',
                'grupo': 'Impresi√≥n',
                'orden': 5,
                'activo': True,
            },
            
            # ==========================================
            # PAR√ÅMETROS FINANCIEROS
            # ==========================================
            {
                'modulo': 'financial',
                'clave': 'permitir_cierre_caja_diferencia',
                'nombre': 'Permitir Cierre con Diferencia',
                'descripcion': 'Permite cerrar caja aunque haya diferencia',
                'tipo_dato': 'BOOLEAN',
                'valor': 'true',
                'valor_default': 'true',
                'grupo': 'Caja',
                'orden': 1,
                'activo': True,
            },
            {
                'modulo': 'financial',
                'clave': 'diferencia_maxima_cierre_caja',
                'nombre': 'Diferencia M√°xima Cierre Caja',
                'descripcion': 'Diferencia m√°xima permitida al cerrar caja',
                'tipo_dato': 'DECIMAL',
                'valor': '5.00',
                'valor_default': '5.00',
                'grupo': 'Caja',
                'orden': 2,
                'activo': True,
            },
            {
                'modulo': 'financial',
                'clave': 'alerta_caja_chica_minima',
                'nombre': 'Alerta Caja Chica M√≠nima',
                'descripcion': 'Monto m√≠nimo antes de alerta de caja chica',
                'tipo_dato': 'DECIMAL',
                'valor': '20.00',
                'valor_default': '20.00',
                'grupo': 'Caja Chica',
                'orden': 3,
                'activo': True,
            },
            
            # ==========================================
            # PAR√ÅMETROS DE REPORTES
            # ==========================================
            {
                'modulo': 'reports',
                'clave': 'dias_retencion_reportes',
                'nombre': 'D√≠as Retenci√≥n de Reportes',
                'descripcion': 'D√≠as para mantener reportes generados antes de eliminar',
                'tipo_dato': 'INTEGER',
                'valor': '90',
                'valor_default': '90',
                'grupo': 'Limpieza',
                'orden': 1,
                'activo': True,
            },
            {
                'modulo': 'reports',
                'clave': 'generar_reporte_diario_automatico',
                'nombre': 'Generar Reporte Diario Autom√°tico',
                'descripcion': 'Genera reporte diario autom√°ticamente al cierre',
                'tipo_dato': 'BOOLEAN',
                'valor': 'true',
                'valor_default': 'true',
                'grupo': 'Automatizaci√≥n',
                'orden': 2,
                'activo': True,
            },
            
            # ==========================================
            # PAR√ÅMETROS DE NOTIFICACIONES
            # ==========================================
            {
                'modulo': 'notifications',
                'clave': 'hora_envio_reporte_diario',
                'nombre': 'Hora Env√≠o Reporte Diario',
                'descripcion': 'Hora para enviar reporte diario por email (formato HH:MM)',
                'tipo_dato': 'STRING',
                'valor': '18:00',
                'valor_default': '18:00',
                'grupo': 'Horarios',
                'orden': 1,
                'activo': True,
            },
            {
                'modulo': 'notifications',
                'clave': 'frecuencia_alertas_stock',
                'nombre': 'Frecuencia Alertas Stock',
                'descripcion': 'Frecuencia de env√≠o de alertas de stock (DIARIO, SEMANAL)',
                'tipo_dato': 'STRING',
                'valor': 'DIARIO',
                'valor_default': 'DIARIO',
                'grupo': 'Frecuencias',
                'orden': 2,
                'activo': True,
            },
            
            # ==========================================
            # PAR√ÅMETROS DE HARDWARE
            # ==========================================
            {
                'modulo': 'hardware',
                'clave': 'impresora_predeterminada',
                'nombre': 'Impresora Predeterminada',
                'descripcion': 'Nombre de la impresora predeterminada para tickets',
                'tipo_dato': 'STRING',
                'valor': 'EPSON TM-T20',
                'valor_default': 'EPSON TM-T20',
                'grupo': 'Impresoras',
                'orden': 1,
                'activo': True,
            },
            {
                'modulo': 'hardware',
                'clave': 'puerto_bascula',
                'nombre': 'Puerto B√°scula',
                'descripcion': 'Puerto serial de la b√°scula (ej: COM3, /dev/ttyUSB0)',
                'tipo_dato': 'STRING',
                'valor': 'COM3',
                'valor_default': 'COM3',
                'grupo': 'B√°sculas',
                'orden': 2,
                'activo': True,
            },
            {
                'modulo': 'hardware',
                'clave': 'velocidad_bascula',
                'nombre': 'Velocidad B√°scula (baud rate)',
                'descripcion': 'Velocidad de comunicaci√≥n con b√°scula',
                'tipo_dato': 'INTEGER',
                'valor': '9600',
                'valor_default': '9600',
                'grupo': 'B√°sculas',
                'orden': 3,
                'activo': True,
            },
        ]

    # ========================================================================
    # PARTE 2: CONFIGURACI√ìN OPERATIVA
    # ========================================================================

    def _crear_usuario_admin(self):
        """Crear usuario administrador si no existe"""
        self.stdout.write('üë§ Configurando usuario administrador...')
        
        if self.reset:
            User.objects.filter(username='admin').delete()
        
        if not User.objects.filter(username='admin').exists():
            admin_user = User.objects.create_superuser(
                username='admin',
                email='admin@commercebox.com',
                password=self.admin_password,
                first_name='Administrador',
                last_name='CommerceBox'
            )
            self.stdout.write(
                self.style.SUCCESS('  ‚úÖ Usuario administrador creado')
            )
            self.stdout.write(
                self.style.WARNING(f'     Usuario: admin')
            )
            self.stdout.write(
                self.style.WARNING(f'     Password: {self.admin_password}')
            )
            self.admin_creado = True
            self.admin_user = admin_user
        else:
            self.stdout.write(
                self.style.WARNING('  ‚ÑπÔ∏è  Usuario administrador ya existe')
            )
            self.admin_creado = False
            self.admin_user = User.objects.get(username='admin')

    def _configurar_inventario(self):
        """Crear ConfiguracionInventario"""
        self.stdout.write('üì¶ Configurando inventario...')
        
        if self.reset:
            ConfiguracionInventario.objects.all().delete()
        
        config, created = ConfiguracionInventario.objects.get_or_create(
            defaults={
                'prefijo_codigo_quintal': 'CBX-QNT',
                'prefijo_codigo_producto': 'CBX-PRD',
                'dias_vencimiento_alerta': 30,
                'porcentaje_stock_bajo': 20,
                'porcentaje_stock_critico': 10,
                'unidades_peso_disponibles': ['kg', 'lb', 'arroba', 'quintal'],
                'creado_por': self.admin_user
            }
        )
        
        if created:
            self.stdout.write(
                self.style.SUCCESS('  ‚úÖ ConfiguracionInventario creada')
            )
            self.config_inventario_creada = True
        else:
            self.stdout.write(
                self.style.WARNING('  ‚ÑπÔ∏è  ConfiguracionInventario ya existe')
            )
            self.config_inventario_creada = False

    def _crear_categorias(self):
        """Crear categor√≠as por defecto"""
        self.stdout.write('üìÅ Creando categor√≠as de productos...')
        
        if self.reset:
            Categoria.objects.all().delete()
        
        categorias_default = [
            ('ALM', 'Alimentos', 'Productos alimenticios y comestibles', 25.0, 10.0),
            ('BEB', 'Bebidas', 'Bebidas, refrescos y jugos', 30.0, 15.0),
            ('LIM', 'Limpieza', 'Productos de limpieza y aseo', 35.0, 10.0),
            ('MED', 'Medicinas', 'Productos farmac√©uticos y medicamentos', 40.0, 5.0),
            ('ACC', 'Accesorios', 'Accesorios y productos varios', 50.0, 10.0),
        ]
        
        creadas = 0
        existentes = 0
        
        for codigo, nombre, descripcion, margen, descuento in categorias_default:
            categoria, created = Categoria.objects.get_or_create(
                codigo=codigo,
                defaults={
                    'nombre': nombre,
                    'descripcion': descripcion,
                    'margen_ganancia': margen,
                    'descuento_maximo': descuento,
                    'activo': True,
                    'creado_por': self.admin_user
                }
            )
            if created:
                creadas += 1
            else:
                existentes += 1
        
        self.stdout.write(
            self.style.SUCCESS(f'  ‚úÖ {creadas} categor√≠as creadas')
        )
        if existentes > 0:
            self.stdout.write(
                self.style.WARNING(f'  ‚ÑπÔ∏è  {existentes} categor√≠as ya exist√≠an')
            )
        
        self.categorias_creadas = creadas
        self.categorias_existentes = existentes

    def _crear_marcas(self):
        """Crear marcas por defecto"""
        self.stdout.write('üè∑Ô∏è  Creando marcas de productos...')
        
        if self.reset:
            Marca.objects.all().delete()
        
        marcas_default = [
            ('GEN', 'Gen√©rica', 'Sin marca espec√≠fica', 'Gen√©rico', 'Local'),
            ('NAC', 'Nacional', 'Marca Nacional S.A.', 'Nacional', 'Ecuador'),
            ('IMP', 'Importada', 'Marca Importada Inc.', 'Importada', 'Internacional'),
        ]
        
        creadas = 0
        existentes = 0
        
        for codigo, nombre, descripcion, fabricante, pais in marcas_default:
            marca, created = Marca.objects.get_or_create(
                codigo=codigo,
                defaults={
                    'nombre': nombre,
                    'descripcion': descripcion,
                    'fabricante': fabricante,
                    'pais_origen': pais,
                    'activo': True,
                    'creado_por': self.admin_user
                }
            )
            if created:
                creadas += 1
            else:
                existentes += 1
        
        self.stdout.write(
            self.style.SUCCESS(f'  ‚úÖ {creadas} marcas creadas')
        )
        if existentes > 0:
            self.stdout.write(
                self.style.WARNING(f'  ‚ÑπÔ∏è  {existentes} marcas ya exist√≠an')
            )
        
        self.marcas_creadas = creadas
        self.marcas_existentes = existentes

    def _crear_proveedor(self):
        """Crear proveedor por defecto"""
        self.stdout.write('üè¢ Creando proveedor general...')
        
        if self.reset:
            Proveedor.objects.filter(codigo='PROV001').delete()
        
        proveedor, created = Proveedor.objects.get_or_create(
            codigo='PROV001',
            defaults={
                'nombre': 'Proveedor General',
                'razon_social': 'Proveedor General S.A.',
                'ruc': '0000000000001',
                'telefono': '000-000-0000',
                'email': 'proveedor@ejemplo.com',
                'direccion': 'Direcci√≥n del proveedor',
                'ciudad': 'Ciudad',
                'pais': 'Ecuador',
                'limite_credito': Decimal('10000.00'),
                'dias_credito': 30,
                'activo': True,
                'creado_por': self.admin_user
            }
        )
        
        if created:
            self.stdout.write(
                self.style.SUCCESS('  ‚úÖ Proveedor general creado')
            )
            self.proveedor_creado = True
        else:
            self.stdout.write(
                self.style.WARNING('  ‚ÑπÔ∏è  Proveedor general ya existe')
            )
            self.proveedor_creado = False

    # ========================================================================
    # RESUMEN FINAL
    # ========================================================================

    def _mostrar_resumen(self):
        """Mostrar resumen de configuraci√≥n"""
        self.stdout.write('\n' + '=' * 70)
        self.stdout.write(
            self.style.SUCCESS('‚úÖ CONFIGURACI√ìN COMPLETADA EXITOSAMENTE')
        )
        self.stdout.write('=' * 70)
        
        # Resumen de creaci√≥n
        self.stdout.write('\nüìä RESUMEN DE CONFIGURACI√ìN:\n')
        
        # Sistema
        self.stdout.write('  üîß SISTEMA:')
        if hasattr(self, 'config_sistema_creada') and self.config_sistema_creada:
            self.stdout.write('     ‚úÖ ConfiguracionSistema creada')
        else:
            self.stdout.write('     ‚ÑπÔ∏è  ConfiguracionSistema ya exist√≠a')
        
        if hasattr(self, 'parametros_creados'):
            self.stdout.write(f'     ‚úÖ {self.parametros_creados} par√°metros del sistema')
            if self.parametros_existentes > 0:
                self.stdout.write(f'     ‚ÑπÔ∏è  {self.parametros_existentes} par√°metros ya exist√≠an')
        
        # Usuario
        self.stdout.write('\n  üë§ USUARIO:')
        if hasattr(self, 'admin_creado') and self.admin_creado:
            self.stdout.write('     ‚úÖ Usuario administrador creado')
        elif not self.skip_admin:
            self.stdout.write('     ‚ÑπÔ∏è  Usuario administrador ya exist√≠a')
        else:
            self.stdout.write('     ‚è≠Ô∏è  Creaci√≥n de admin omitida')
        
        # Inventario
        self.stdout.write('\n  üì¶ INVENTARIO:')
        if hasattr(self, 'config_inventario_creada') and self.config_inventario_creada:
            self.stdout.write('     ‚úÖ ConfiguracionInventario creada')
        else:
            self.stdout.write('     ‚ÑπÔ∏è  ConfiguracionInventario ya exist√≠a')
        
        if hasattr(self, 'categorias_creadas'):
            self.stdout.write(f'     ‚úÖ {self.categorias_creadas} categor√≠as de productos')
            if self.categorias_existentes > 0:
                self.stdout.write(f'     ‚ÑπÔ∏è  {self.categorias_existentes} categor√≠as ya exist√≠an')
        
        if hasattr(self, 'marcas_creadas'):
            self.stdout.write(f'     ‚úÖ {self.marcas_creadas} marcas de productos')
            if self.marcas_existentes > 0:
                self.stdout.write(f'     ‚ÑπÔ∏è  {self.marcas_existentes} marcas ya exist√≠an')
        
        if hasattr(self, 'proveedor_creado') and self.proveedor_creado:
            self.stdout.write('     ‚úÖ Proveedor general creado')
        else:
            self.stdout.write('     ‚ÑπÔ∏è  Proveedor general ya exist√≠a')
        
        # Credenciales
        if hasattr(self, 'admin_creado') and self.admin_creado:
            self.stdout.write('\nüîë CREDENCIALES DE ACCESO:')
            self.stdout.write('     Usuario: admin')
            self.stdout.write(f'     Password: {self.admin_password}')
            self.stdout.write('     ‚ö†Ô∏è  IMPORTANTE: Cambiar password en producci√≥n')
        
        # URLs importantes
        self.stdout.write('\nüåê ACCESOS PRINCIPALES:')
        self.stdout.write('     Admin Django: http://localhost:8000/admin/')
        self.stdout.write('     Configuraci√≥n: http://localhost:8000/configuracion/')
        self.stdout.write('     Inventario: http://localhost:8000/inventario/')
        
        # Pr√≥ximos pasos
        self.stdout.write('\nüìã PR√ìXIMOS PASOS:')
        self.stdout.write('     1. Iniciar sesi√≥n en el admin')
        self.stdout.write('     2. Configurar datos de la empresa en Configuraci√≥n del Sistema')
        self.stdout.write('     3. Ajustar par√°metros seg√∫n necesidades')
        self.stdout.write('     4. Comenzar a cargar productos')
        self.stdout.write('     5. ¬°Empezar a vender!')
        
        # Comandos √∫tiles
        self.stdout.write('\nüîß COMANDOS √öTILES:')
        self.stdout.write('     python manage.py backup_system --tipo MANUAL')
        self.stdout.write('     python manage.py system_health_check --verbose')
        self.stdout.write('     python manage.py runserver')
        
        self.stdout.write('\n' + '=' * 70)
        self.stdout.write(
            self.style.SUCCESS('üéâ ¬°COMMERCEBOX EST√Å LISTO PARA USAR!')
        )
        self.stdout.write('=' * 70)
        self.stdout.write('')