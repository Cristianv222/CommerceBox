# Generated by Django 4.2.7 on 2025-10-15 22:57

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="HealthCheck",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "estado_general",
                    models.CharField(
                        choices=[
                            ("SALUDABLE", "‚úÖ Saludable"),
                            ("ADVERTENCIA", "‚ö†Ô∏è Advertencia"),
                            ("CRITICO", "üî¥ Cr√≠tico"),
                        ],
                        max_length=20,
                    ),
                ),
                ("base_datos_ok", models.BooleanField(default=True)),
                ("redis_ok", models.BooleanField(default=True)),
                ("celery_ok", models.BooleanField(default=True)),
                ("disco_ok", models.BooleanField(default=True)),
                ("memoria_ok", models.BooleanField(default=True)),
                (
                    "espacio_disco_libre_gb",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "uso_memoria_porcentaje",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "tiempo_respuesta_db_ms",
                    models.IntegerField(
                        blank=True,
                        help_text="Tiempo de respuesta de la base de datos en ms",
                        null=True,
                    ),
                ),
                (
                    "detalles",
                    models.JSONField(
                        default=dict, help_text="Detalles adicionales del health check"
                    ),
                ),
                (
                    "errores",
                    models.JSONField(
                        default=list, help_text="Lista de errores encontrados"
                    ),
                ),
                (
                    "advertencias",
                    models.JSONField(default=list, help_text="Lista de advertencias"),
                ),
                (
                    "fecha_check",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
            ],
            options={
                "verbose_name": "Health Check",
                "verbose_name_plural": "Health Checks",
                "db_table": "sys_config_health_check",
                "ordering": ["-fecha_check"],
            },
        ),
        migrations.CreateModel(
            name="ConfiguracionSistema",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nombre_empresa",
                    models.CharField(
                        default="CommerceBox",
                        help_text="Nombre de la empresa/negocio",
                        max_length=200,
                    ),
                ),
                (
                    "ruc_empresa",
                    models.CharField(
                        blank=True,
                        help_text="RUC o NIT de la empresa",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d{10,20}$", "RUC/NIT inv√°lido"
                            )
                        ],
                    ),
                ),
                (
                    "direccion_empresa",
                    models.TextField(
                        blank=True, help_text="Direcci√≥n f√≠sica del negocio"
                    ),
                ),
                (
                    "telefono_empresa",
                    models.CharField(
                        blank=True, help_text="Tel√©fono principal", max_length=20
                    ),
                ),
                (
                    "email_empresa",
                    models.EmailField(
                        blank=True, help_text="Email de contacto", max_length=254
                    ),
                ),
                (
                    "sitio_web",
                    models.URLField(blank=True, help_text="Sitio web de la empresa"),
                ),
                (
                    "logo_empresa",
                    models.ImageField(
                        blank=True,
                        help_text="Logo de la empresa (recomendado: 200x200px, formato PNG con fondo transparente)",
                        null=True,
                        upload_to="empresa/logos/",
                    ),
                ),
                (
                    "prefijo_codigo_quintal",
                    models.CharField(
                        default="CBX-QNT",
                        help_text="Prefijo para c√≥digos de quintales",
                        max_length=10,
                    ),
                ),
                (
                    "prefijo_codigo_producto",
                    models.CharField(
                        default="CBX-PRD",
                        help_text="Prefijo para c√≥digos de productos",
                        max_length=10,
                    ),
                ),
                (
                    "longitud_codigo_secuencial",
                    models.IntegerField(
                        default=5,
                        help_text="Longitud del n√∫mero secuencial en c√≥digos",
                        validators=[
                            django.core.validators.MinValueValidator(3),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "umbral_stock_critico_porcentaje",
                    models.DecimalField(
                        decimal_places=2,
                        default=10.0,
                        help_text="% para considerar stock cr√≠tico (quintales)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "umbral_stock_bajo_porcentaje",
                    models.DecimalField(
                        decimal_places=2,
                        default=25.0,
                        help_text="% para considerar stock bajo (quintales)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "stock_minimo_default",
                    models.IntegerField(
                        default=10,
                        help_text="Stock m√≠nimo por defecto para productos normales",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "dias_alerta_vencimiento",
                    models.IntegerField(
                        default=30,
                        help_text="D√≠as antes del vencimiento para generar alerta",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(365),
                        ],
                    ),
                ),
                (
                    "peso_minimo_quintal_critico",
                    models.DecimalField(
                        decimal_places=3,
                        default=5.0,
                        help_text="Peso m√≠nimo (kg) para considerar quintal cr√≠tico",
                        max_digits=10,
                    ),
                ),
                (
                    "prefijo_numero_factura",
                    models.CharField(
                        default="CBX",
                        help_text="Prefijo para n√∫meros de factura",
                        max_length=10,
                    ),
                ),
                (
                    "prefijo_numero_venta",
                    models.CharField(
                        default="VNT",
                        help_text="Prefijo para n√∫meros de venta",
                        max_length=10,
                    ),
                ),
                (
                    "iva_default",
                    models.DecimalField(
                        decimal_places=2,
                        default=15.0,
                        help_text="IVA por defecto (%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "max_descuento_sin_autorizacion",
                    models.DecimalField(
                        decimal_places=2,
                        default=10.0,
                        help_text="Descuento m√°ximo sin autorizaci√≥n (%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "permitir_ventas_credito",
                    models.BooleanField(
                        default=True, help_text="Permitir ventas a cr√©dito"
                    ),
                ),
                (
                    "dias_credito_default",
                    models.IntegerField(
                        default=30,
                        help_text="D√≠as de cr√©dito por defecto",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(365),
                        ],
                    ),
                ),
                (
                    "moneda",
                    models.CharField(
                        default="USD",
                        help_text="C√≥digo de moneda (USD, EUR, etc.)",
                        max_length=3,
                    ),
                ),
                (
                    "simbolo_moneda",
                    models.CharField(
                        default="$", help_text="S√≠mbolo de la moneda", max_length=5
                    ),
                ),
                (
                    "decimales_moneda",
                    models.IntegerField(
                        default=2,
                        help_text="N√∫mero de decimales para montos",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(4),
                        ],
                    ),
                ),
                (
                    "monto_inicial_caja",
                    models.DecimalField(
                        decimal_places=2,
                        default=100.0,
                        help_text="Monto inicial sugerido para apertura de caja",
                        max_digits=10,
                    ),
                ),
                (
                    "monto_fondo_caja_chica",
                    models.DecimalField(
                        decimal_places=2,
                        default=50.0,
                        help_text="Monto del fondo de caja chica",
                        max_digits=10,
                    ),
                ),
                (
                    "alerta_diferencia_caja",
                    models.DecimalField(
                        decimal_places=2,
                        default=5.0,
                        help_text="Diferencia m√°xima permitida en arqueo de caja",
                        max_digits=10,
                    ),
                ),
                (
                    "facturacion_electronica_activa",
                    models.BooleanField(
                        default=False, help_text="Activar facturaci√≥n electr√≥nica"
                    ),
                ),
                (
                    "ambiente_facturacion",
                    models.CharField(
                        choices=[("PRUEBAS", "Pruebas"), ("PRODUCCION", "Producci√≥n")],
                        default="PRUEBAS",
                        help_text="Ambiente de facturaci√≥n electr√≥nica",
                        max_length=20,
                    ),
                ),
                (
                    "certificado_digital_path",
                    models.CharField(
                        blank=True,
                        help_text="Ruta del certificado digital",
                        max_length=500,
                    ),
                ),
                (
                    "clave_certificado",
                    models.CharField(
                        blank=True,
                        help_text="Clave del certificado (encriptada)",
                        max_length=200,
                    ),
                ),
                (
                    "notificaciones_email_activas",
                    models.BooleanField(
                        default=True, help_text="Activar notificaciones por email"
                    ),
                ),
                (
                    "email_notificaciones",
                    models.EmailField(
                        blank=True,
                        help_text="Email principal para notificaciones",
                        max_length=254,
                    ),
                ),
                (
                    "emails_adicionales",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Lista de emails adicionales",
                    ),
                ),
                (
                    "notificar_stock_bajo",
                    models.BooleanField(
                        default=True, help_text="Notificar cuando hay stock bajo"
                    ),
                ),
                (
                    "notificar_vencimientos",
                    models.BooleanField(
                        default=True, help_text="Notificar productos pr√≥ximos a vencer"
                    ),
                ),
                (
                    "notificar_cierre_caja",
                    models.BooleanField(
                        default=True, help_text="Notificar al cerrar caja"
                    ),
                ),
                (
                    "backup_automatico_activo",
                    models.BooleanField(
                        default=True, help_text="Activar backups autom√°ticos"
                    ),
                ),
                (
                    "frecuencia_backup",
                    models.CharField(
                        choices=[
                            ("DIARIO", "Diario"),
                            ("SEMANAL", "Semanal"),
                            ("MENSUAL", "Mensual"),
                        ],
                        default="DIARIO",
                        help_text="Frecuencia de backups autom√°ticos",
                        max_length=20,
                    ),
                ),
                (
                    "hora_backup",
                    models.TimeField(
                        default="02:00:00",
                        help_text="Hora para ejecutar backup autom√°tico",
                    ),
                ),
                (
                    "dias_retencion_backup",
                    models.IntegerField(
                        default=30,
                        help_text="D√≠as para mantener backups antiguos",
                        validators=[
                            django.core.validators.MinValueValidator(7),
                            django.core.validators.MaxValueValidator(365),
                        ],
                    ),
                ),
                (
                    "ruta_backup",
                    models.CharField(
                        default="/backups/",
                        help_text="Ruta donde guardar backups",
                        max_length=500,
                    ),
                ),
                (
                    "version_sistema",
                    models.CharField(
                        default="1.0.0",
                        editable=False,
                        help_text="Versi√≥n actual del sistema",
                        max_length=20,
                    ),
                ),
                (
                    "mantenimiento_activo",
                    models.BooleanField(
                        default=False, help_text="Modo mantenimiento (bloquea acceso)"
                    ),
                ),
                (
                    "mensaje_mantenimiento",
                    models.TextField(
                        blank=True,
                        default="Sistema en mantenimiento. Volveremos pronto.",
                        help_text="Mensaje a mostrar durante mantenimiento",
                    ),
                ),
                (
                    "activar_logs_detallados",
                    models.BooleanField(
                        default=True, help_text="Activar logs detallados del sistema"
                    ),
                ),
                (
                    "dias_retencion_logs",
                    models.IntegerField(
                        default=90,
                        help_text="D√≠as para mantener logs",
                        validators=[
                            django.core.validators.MinValueValidator(7),
                            django.core.validators.MaxValueValidator(365),
                        ],
                    ),
                ),
                (
                    "timeout_sesion",
                    models.IntegerField(
                        default=3600,
                        help_text="Tiempo de sesi√≥n en segundos (5 min - 24 hrs)",
                        validators=[
                            django.core.validators.MinValueValidator(300),
                            django.core.validators.MaxValueValidator(86400),
                        ],
                    ),
                ),
                (
                    "intentos_login_maximos",
                    models.IntegerField(
                        default=5,
                        help_text="Intentos de login antes de bloquear",
                        validators=[
                            django.core.validators.MinValueValidator(3),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "tiempo_bloqueo_cuenta",
                    models.IntegerField(
                        default=30,
                        help_text="Minutos de bloqueo por intentos fallidos",
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(1440),
                        ],
                    ),
                ),
                (
                    "tema_interfaz",
                    models.CharField(
                        choices=[
                            ("CLARO", "Claro"),
                            ("OSCURO", "Oscuro"),
                            ("AUTO", "Autom√°tico"),
                        ],
                        default="CLARO",
                        help_text="Tema visual de la interfaz",
                        max_length=20,
                    ),
                ),
                (
                    "idioma",
                    models.CharField(
                        choices=[("es", "Espa√±ol"), ("en", "English")],
                        default="es",
                        help_text="Idioma del sistema",
                        max_length=5,
                    ),
                ),
                (
                    "zona_horaria",
                    models.CharField(
                        default="America/Bogota",
                        help_text="Zona horaria del sistema",
                        max_length=50,
                    ),
                ),
                (
                    "formato_fecha",
                    models.CharField(
                        default="DD/MM/YYYY",
                        help_text="Formato de visualizaci√≥n de fechas",
                        max_length=20,
                    ),
                ),
                (
                    "formato_hora",
                    models.CharField(
                        choices=[("24h", "24 Horas"), ("12h", "12 Horas (AM/PM)")],
                        default="24h",
                        help_text="Formato de visualizaci√≥n de hora",
                        max_length=20,
                    ),
                ),
                (
                    "modulo_inventario_activo",
                    models.BooleanField(
                        default=True, help_text="M√≥dulo de inventario activo"
                    ),
                ),
                (
                    "modulo_ventas_activo",
                    models.BooleanField(
                        default=True, help_text="M√≥dulo de ventas activo"
                    ),
                ),
                (
                    "modulo_financiero_activo",
                    models.BooleanField(
                        default=True, help_text="M√≥dulo financiero activo"
                    ),
                ),
                (
                    "modulo_reportes_activo",
                    models.BooleanField(
                        default=True, help_text="M√≥dulo de reportes activo"
                    ),
                ),
                (
                    "modulo_alertas_activo",
                    models.BooleanField(
                        default=True, help_text="Sistema de alertas activo"
                    ),
                ),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                ("fecha_actualizacion", models.DateTimeField(auto_now=True)),
                (
                    "actualizado_por",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="configuraciones_sistema",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Configuraci√≥n del Sistema",
                "verbose_name_plural": "Configuraci√≥n del Sistema",
                "db_table": "sys_config_sistema",
            },
        ),
        migrations.CreateModel(
            name="RegistroBackup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "nombre_archivo",
                    models.CharField(
                        help_text="Nombre del archivo de backup", max_length=200
                    ),
                ),
                (
                    "ruta_archivo",
                    models.CharField(
                        help_text="Ruta completa del backup", max_length=500
                    ),
                ),
                (
                    "tipo_backup",
                    models.CharField(
                        choices=[
                            ("COMPLETO", "Backup Completo"),
                            ("INCREMENTAL", "Backup Incremental"),
                            ("MANUAL", "Backup Manual"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "tama√±o_bytes",
                    models.BigIntegerField(
                        default=0, help_text="Tama√±o del backup en bytes"
                    ),
                ),
                (
                    "tama√±o_comprimido_bytes",
                    models.BigIntegerField(
                        blank=True, help_text="Tama√±o comprimido del backup", null=True
                    ),
                ),
                (
                    "tablas_incluidas",
                    models.JSONField(
                        default=list, help_text="Lista de tablas incluidas en el backup"
                    ),
                ),
                (
                    "total_registros",
                    models.BigIntegerField(
                        default=0, help_text="Total de registros respaldados"
                    ),
                ),
                (
                    "estado",
                    models.CharField(
                        choices=[
                            ("EXITOSO", "‚úÖ Exitoso"),
                            ("FALLIDO", "‚ùå Fallido"),
                            ("EN_PROCESO", "‚è≥ En Proceso"),
                            ("CANCELADO", "‚ö†Ô∏è Cancelado"),
                        ],
                        db_index=True,
                        default="EN_PROCESO",
                        max_length=20,
                    ),
                ),
                (
                    "mensaje_error",
                    models.TextField(blank=True, help_text="Mensaje de error si fall√≥"),
                ),
                (
                    "fecha_inicio",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("fecha_finalizacion", models.DateTimeField(blank=True, null=True)),
                (
                    "duracion_segundos",
                    models.IntegerField(
                        blank=True,
                        help_text="Duraci√≥n del backup en segundos",
                        null=True,
                    ),
                ),
                (
                    "restaurado",
                    models.BooleanField(
                        default=False, help_text="Indica si este backup fue restaurado"
                    ),
                ),
                ("fecha_restauracion", models.DateTimeField(blank=True, null=True)),
                (
                    "usuario",
                    models.ForeignKey(
                        blank=True,
                        help_text="Usuario que ejecut√≥ el backup",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Registro de Backup",
                "verbose_name_plural": "Registros de Backups",
                "db_table": "sys_config_backup",
                "ordering": ["-fecha_inicio"],
                "indexes": [
                    models.Index(
                        fields=["-fecha_inicio", "estado"],
                        name="sys_config__fecha_i_d61715_idx",
                    ),
                    models.Index(
                        fields=["tipo_backup", "estado"],
                        name="sys_config__tipo_ba_a102c3_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ParametroSistema",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "modulo",
                    models.CharField(
                        db_index=True,
                        help_text="M√≥dulo al que pertenece (inventory, sales, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "clave",
                    models.CharField(
                        db_index=True,
                        help_text="Clave √∫nica del par√°metro",
                        max_length=100,
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre descriptivo del par√°metro", max_length=200
                    ),
                ),
                (
                    "descripcion",
                    models.TextField(
                        blank=True, help_text="Descripci√≥n detallada del par√°metro"
                    ),
                ),
                (
                    "tipo_dato",
                    models.CharField(
                        choices=[
                            ("STRING", "Texto"),
                            ("INTEGER", "N√∫mero Entero"),
                            ("DECIMAL", "N√∫mero Decimal"),
                            ("BOOLEAN", "Verdadero/Falso"),
                            ("JSON", "JSON/Objeto"),
                            ("DATE", "Fecha"),
                            ("DATETIME", "Fecha y Hora"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "valor",
                    models.TextField(
                        help_text="Valor del par√°metro (almacenado como texto)"
                    ),
                ),
                ("valor_default", models.TextField(help_text="Valor por defecto")),
                (
                    "requerido",
                    models.BooleanField(
                        default=False, help_text="Par√°metro obligatorio"
                    ),
                ),
                (
                    "editable",
                    models.BooleanField(
                        default=True, help_text="Puede ser editado por usuarios"
                    ),
                ),
                (
                    "validacion_regex",
                    models.CharField(
                        blank=True,
                        help_text="Expresi√≥n regular para validaci√≥n",
                        max_length=200,
                    ),
                ),
                (
                    "grupo",
                    models.CharField(
                        blank=True,
                        help_text="Grupo para organizar par√°metros",
                        max_length=100,
                    ),
                ),
                (
                    "orden",
                    models.IntegerField(default=0, help_text="Orden de visualizaci√≥n"),
                ),
                ("activo", models.BooleanField(default=True)),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                ("fecha_actualizacion", models.DateTimeField(auto_now=True)),
                (
                    "actualizado_por",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Par√°metro del Sistema",
                "verbose_name_plural": "Par√°metros del Sistema",
                "db_table": "sys_config_parametro",
                "ordering": ["modulo", "grupo", "orden", "nombre"],
                "indexes": [
                    models.Index(
                        fields=["modulo", "activo"],
                        name="sys_config__modulo_791fd3_idx",
                    ),
                    models.Index(fields=["clave"], name="sys_config__clave_ef5cd8_idx"),
                ],
                "unique_together": {("modulo", "clave")},
            },
        ),
        migrations.CreateModel(
            name="LogConfiguracion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "tabla",
                    models.CharField(help_text="Tabla que se modific√≥", max_length=100),
                ),
                (
                    "registro_id",
                    models.CharField(
                        help_text="ID del registro modificado", max_length=50
                    ),
                ),
                (
                    "tipo_cambio",
                    models.CharField(
                        choices=[
                            ("CREACION", "Creaci√≥n"),
                            ("MODIFICACION", "Modificaci√≥n"),
                            ("ELIMINACION", "Eliminaci√≥n"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "campo_modificado",
                    models.CharField(
                        blank=True,
                        help_text="Campo espec√≠fico modificado",
                        max_length=100,
                    ),
                ),
                (
                    "valor_anterior",
                    models.TextField(blank=True, help_text="Valor antes del cambio"),
                ),
                (
                    "valor_nuevo",
                    models.TextField(blank=True, help_text="Valor despu√©s del cambio"),
                ),
                (
                    "descripcion",
                    models.TextField(blank=True, help_text="Descripci√≥n del cambio"),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "fecha_cambio",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Log de Configuraci√≥n",
                "verbose_name_plural": "Logs de Configuraci√≥n",
                "db_table": "sys_config_log",
                "ordering": ["-fecha_cambio"],
                "indexes": [
                    models.Index(
                        fields=["-fecha_cambio"], name="sys_config__fecha_c_65be61_idx"
                    ),
                    models.Index(
                        fields=["tabla", "-fecha_cambio"],
                        name="sys_config__tabla_8f66d2_idx",
                    ),
                    models.Index(
                        fields=["usuario", "-fecha_cambio"],
                        name="sys_config__usuario_8c910a_idx",
                    ),
                ],
            },
        ),
    ]
